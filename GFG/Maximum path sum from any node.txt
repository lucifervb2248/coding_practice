int maxPathSumUtil(Node* root, int& res) {
  
    // Base case: return 0 for a null node
    if (root == NULL)
        return 0;

    // Calculate maximum path sums for left and right subtrees
    int l = max(0, maxPathSumUtil(root->left, res));
    int r = max(0, maxPathSumUtil(root->right, res));

    // Update 'res' with the maximum path sum passing through the current node
    res = max(res, l + r + root->data);

    // Return the maximum path sum rooted at this node
    return root->data + max(l, r);
}

// Returns maximum path sum in tree with given root
int findMaxSum(Node* root) {
    int res = root->data;
    
      // Compute maximum path sum and store it in 'res'
    maxPathSumUtil(root, res);
  
    return res;
}