int minJumpsRecur(int i, vector<int> &arr, vector<int> &memo) {
    
    // Return 0 when last element is reached.
    if (i == arr.size()-1)
        return 0;
        
    // If value for current index is memoized,
    // then return it.
    if (memo[i] != -1) return memo[i];

    // Traverse through all the points
    // reachable from arr[i].
    // Recursively, get the minimum number
    // of jumps needed to reach array end from
    // these points.
    int ans = INT_MAX;
    for (int j=i+1; j<=i+arr[i] && j<arr.size(); j++) {
        int val = minJumpsRecur(j, arr, memo);
        if (val != INT_MAX)
            ans = min(ans, 1+val);
    }
    
    // Memoize the value and 
    // return it.
    return memo[i] = ans;
}

// Function to return the minimum number
// of jumps to reach arr[h] from arr[l]
int minJumps(vector<int>& arr) {
    
    // array to memoize values
    vector<int> memo(arr.size(), -1);
    
    int ans =  minJumpsRecur(0, arr, memo);
    
    // If end cannot be reached.
    if (ans == INT_MAX) 
        return -1;
        
    return ans;
}