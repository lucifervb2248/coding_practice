Node* getMinNode(vector<Node*> &arr) {
    
    Node* mini = nullptr;
    int index = -1;
    
    for (int i=0; i<arr.size(); i++) {
        
        // If current list is processed
        if (arr[i]==nullptr) continue;
        
        // If min node is not set or 
        // current head has smaller value.
        if (mini==nullptr || arr[i]->data<mini->data) {
            index = i;
            mini = arr[i];
        }
    }
    
    // Increment the head node 
    if (index!=-1) arr[index] = arr[index]->next;
    
    return mini;
}

// Function to merge K sorted linked lists
Node* mergeKLists(vector<Node*>& arr) {
  
    // Create a dummy node to simplify 
    // the merging process
    Node* dummy = new Node(-1);
    Node* tail = dummy;
    
    Node* mini = getMinNode(arr);
    
    // Process all nodes.
    while (mini != nullptr) {
        
        // Append min node to the result.
        tail->next = mini;
        tail = mini;
        
        // Find the next min node 
        mini = getMinNode(arr);
    }

    // Return the merged list starting
    // from the next of dummy node
    return dummy->next;
}