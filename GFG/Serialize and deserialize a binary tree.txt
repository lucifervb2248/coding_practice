void serializePreOrder(Node* root, vector<int> &arr) {
    
    // Push -1 if root is null.
    if (root == nullptr) {
        arr.push_back(-1);
        return;
    }
    
    // Push the root into result.
    arr.push_back(root->data);
    
    // Recursively traverse the 
    // left and right subtree.
    serializePreOrder(root->left, arr);
    serializePreOrder(root->right, arr);
}

// Main function to serialize a tree.
vector<int> serialize(Node *root) {
    vector<int> arr;
    serializePreOrder(root, arr);
    return arr;
}

// Function which traverse the array in preorder 
// manner and constructs the tree.
Node* deserializePreOrder(int &i, vector<int> &arr) {
    
    // -1 meres null.
    if (arr[i] == -1){
        i++;
        return nullptr;
    }
    
    // Create the root node.
    Node* root = new Node(arr[i]);
    i++;
    
    // Create the left and right subtree.
    root->left = deserializePreOrder(i, arr);
    root->right = deserializePreOrder(i, arr);
    
    return root;
}


Node * deSerialize(vector<int> &arr) {
   int i = 0;
   return deserializePreOrder(i, arr);
}